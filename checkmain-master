#!/bin/bash -i

# This script was developed in a 130x30 terminal.

# The "learn-unix-scripts" project is free software: you can redistribute it and/or modify it under the terms of the GNU
# General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# The "learn-unix-scripts" project is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along with this project; if not, write to the
# Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA, 02111-1307, USA.
#
# Copyright (C) 2021 Christopher Evans

# replace start b2074508-dd08-48be-bc6c-346c26349e4e (see below for what this line does)

# This script is the master script for the checkmain script.  If you have site-specific changes that you don't want to share,
# you can add a GUID in this script and use the "replace" script to merge this script with your site-specific changes
# (in checkmain-replace) and create a site-specific learn script.  You can insert or replace portions of this code.

# If we didn't replace this text when we created the "checkmain" script, it would seem as though people should be making
# the changes to the "checkmain" script and not this one.  See the replacement for 1acc396a-02a2-40b8-a427-f4685c20320e in
# checkmain-replace for more.

# Insert exercises or elements that are specific to your site with "# insert <GUID>".  If you put a space after the GUID,
# you can add comments.  Replace parts with "# replace start <GUID>" and "# replace end <GUID>".  To remove sections,
# replace the content with nothing.  Put the replacements in the learn-replace file.
#
# replace end b2074508-dd08-48be-bc6c-346c26349e4e

# In case this script needs to be moved back to being sourced, use a prefix on the environment variables to avoid messing
# up other programs (Learn Unix Check or luc_).

set -e -o nounset

# insert 17fa07e6-24b8-4e35-bc1a-094427fd8699

if [ `whoami` == "root" ]; then
	echo "Run this script as yourself, not the root user."
	exit 1
fi

if [ -z "${1:-}" ]; then
	echo "This script is not meant to be run directly."
	echo "Please execute '. check' to invoke the wrapper script."
fi

luc_history=()
while read i; do
	luc_history+=("$i")
done

luc_black_on_white="\033[30;100m"
luc_bright_white_on_black="\033[107;40m"
luc_yellow_on_black="\033[93;40m"
luc_green_on_black="\033[92;40m"
luc_blue_on_black="\033[94;40m"
luc_red_on_black="\033[91;40m"

luc_nc='\033[0m' # No colour

# Use an associative array to make it easy to reorder the exercises and add more in the middle.

i=1
declare -A exercises
exercises["white_belt_$((i++))"]="what_execute_means"
exercises["white_belt_$((i++))"]="stuck"
exercises["white_belt_$((i++))"]="cd_root"
exercises["white_belt_$((i++))"]="ls_root"
exercises["white_belt_$((i++))"]="common_root_directories"
exercises["white_belt_$((i++))"]="frozen"
exercises["white_belt_$((i++))"]="set"
exercises["white_belt_$((i++))"]="set_more"
exercises["white_belt_$((i++))"]="set_less"
exercises["white_belt_$((i++))"]="path_and_sourcing"

i=1
#exercises["yellow_stripe_$((i++))"]="end"

luc_tty=$1

luc_stty_rows=$(bash -c "stty -a -F$1 | grep -Po '(?<=rows )[0-9]*(?=;)'")
luc_stty_columns=$(bash -c "stty -a -F$1 | grep -Po '(?<=columns )[0-9]*(?=;)'")
luc_width=`expr $luc_stty_columns - 5`

luc_good_work_array[0]="Good work!"
luc_good_work_array[1]="Excellent!"
luc_good_work_array[2]="Well done!"
luc_good_work_array[3]="Brilliant!"
luc_good_work_array[4]="Terrific!"

luc_sorry_array[0]="Better luck next time."
luc_sorry_array[1]="Unfortunately, no."
luc_sorry_array[2]="Sorry, that's not it."
luc_sorry_array[3]="That's not it.  Try again."

good_work() {
	size=${#luc_good_work_array[@]}
	index=$(($RANDOM % $size))
	echo ${luc_good_work_array[$index]}

	EXERCISE=`expr $EXERCISE + 1`
}

sorry() {
	size=${#luc_sorry_array[@]}
	index=$(($RANDOM % $size))
	echo ${luc_sorry_array[$index]}
	echo "Run the learn script again if you need to."
}

process_choice() {
	luc_processed_choice=0

	if [[ -z "${luc_choice:-}" ]]; then
		return
	fi

	# That's right, Roman numerals!  Inspired by Starship Titanic.

	# Use the ${ ,,} syntax to lowercase.
	if [[ "${luc_choice,,}" =~ ^[\ ]*(one|1|i)[\ ]*$ ]]; then
		luc_processed_choice=1
	fi

	if [[ "${luc_choice,,}" =~ ^[\ ]*(two|2|ii)[\ ]*$ ]]; then
		luc_processed_choice=2
	fi

	if [[ "${luc_choice,,}" =~ ^[\ ]*(three|3|iii)[\ ]*$ ]]; then
		luc_processed_choice=3
	fi

	if [[ "${luc_choice,,}" =~ ^[\ ]*(four|4|iiii|iv)[\ ]*$ ]]; then
		luc_processed_choice=4
	fi

	if [[ "${luc_choice,,}" =~ ^[\ ]*(five|5|v)[\ ]*$ ]]; then
		luc_processed_choice=5
	fi

	if [[ "${luc_choice,,}" =~ ^[\ ]*(six|6|vi)[\ ]*$ ]]; then
		luc_processed_choice=6
	fi

	if [[ "${luc_choice,,}" =~ ^[\ ]*(seven|7|vii)[\ ]*$ ]]; then
		luc_processed_choice=7
	fi

	if [[ "${luc_choice,,}" =~ ^[\ ]*(eight|8|viii)[\ ]*$ ]]; then
		luc_processed_choice=8
	fi

	if [[ "${luc_choice,,}" =~ ^[\ ]*(nine|9|ix)[\ ]*$ ]]; then
		luc_processed_choice=9
	fi

	if [[ "${luc_choice,,}" =~ ^[\ ]*(ten|10|x)[\ ]*$ ]]; then
		luc_processed_choice=10
	fi
}

white_belt_exercise_what_execute_means() {
	# For this exercise, we're only confirming this script was run, so there's nothing to check.
	good_work
	echo ""
	fmt -u --width=$luc_width <<EOL
For each exercise, you'll run the learn and check scripts.  Execute "learn" for your next task or to pick up where you left off.
EOL
}

white_belt_exercise_stuck() {
	# For this exercise, we're only confirming this script was run, so there's nothing to check.
	good_work
	echo ""
	fmt -u --width=$luc_width <<EOL
Execute "learn" for your next task or to pick up where you left off.
EOL
}

white_belt_exercise_cd_root() {
	if [[ `pwd` == "/" ]]; then
		good_work
		echo ""
		echo $'Execute "learn" when you\'re ready for the next exercise.'
	else
		sorry
	fi
}

white_belt_exercise_ls_root() {
	# Chances are, "ls" is going to be in the history, so cheaters will get a pass on this one.
	# We could generate history with a smaller size for this exercise, but it doesn't seem worthwhile.
	# The list command is so basic that I'm not really concerned that something will be missed here.

	good_work
	echo ""
	echo $'Execute "learn" when you\'re ready for the next exercise.'
}

white_belt_exercise_common_root_directories() {
	if [[ `pwd` == "$HOME" ]]; then
		good_work
		echo ""
		echo $'Execute "learn" when you\'re ready for the next exercise.'
	else
		sorry
	fi
}

white_belt_exercise_set() {
	IFS='
'

	for item in "${luc_history[@]}"
	do
		if [[ "$item" =~ ^[\ ]*set([ ]|$) ]]; then
			good_work
			echo ""
			echo $'Execute "learn" when you\'re ready for the next exercise.'
			unset IFS
			return
		fi
	done

	sorry
	unset IFS
	return
}

white_belt_exercise_frozen() {
	fmt -u --width=$luc_width <<EOL
Question 1/1

Your terminal is frozen!  What is the next thing you should try after typing Ctrl+c?

EOL

	luc_answers=( 'Give up and go back to Windows' 'Type Ctrl+q' 'Type Ctrl+s' 'Type Ctrl+u' 'Scream in panic' 'Open another terminal' )

	luc_shuffled_answers=()
	while read -r item; do
	    luc_shuffled_answers+=("$item")
	done < <(shuf -e "${luc_answers[@]}")

	luc_correct_answer=0
	luc_num=1
	for item in "${luc_shuffled_answers[@]}"
	do
		echo "(${luc_num}) $item"
		if [[ "$item" == "Type Ctrl+q" ]]; then
			luc_correct_answer=$luc_num
		fi
		luc_num=$((luc_num+1))
	done

	echo ""
	# Stdin has been redirected to pull in the command history, so we need an extra step to read from the terminal.
	# There must be no space between < and /.
	read -p "Your answer (1-6)?  " luc_choice </dev/tty

	process_choice

	echo ""

	if [[ "$luc_processed_choice" == "$luc_correct_answer" ]]; then
		good_work
		echo ""
		echo $'Execute "learn" when you\'re ready for the next exercise.'
	elif [[ "$luc_processed_choice" == "0" ]]; then
		echo "Your answer should be a number from 1 to 6."
		echo 'Execute "learn" to review the exerice or execute ". check" to try again.'
	else
		sorry
	fi
}

white_belt_exercise_set_more() {
	IFS='
'

	for item in "${luc_history[@]}"
	do
		if [[ "$item" =~ ^[\ ]*set[\ ]*\|[\ ]*more[\ ]*$ ]]; then
			good_work
			echo ""
			echo $'Execute "learn" when you\'re ready for the next exercise.'
			unset IFS
			return
		fi
	done

	sorry
	unset IFS
	return
}

white_belt_exercise_set_less() {
	IFS='
'

	for item in "${luc_history[@]}"
	do
		if [[ "$item" =~ ^[\ ]*set[\ ]*\|[\ ]*less[\ ]*$ ]]; then
			good_work
			echo ""
			echo $'Execute "learn" when you\'re ready for the next exercise.'
			unset IFS
			return
		fi
	done

	sorry
	unset IFS
	return
}

white_belt_exercise_path_and_sourcing() {
	# For this exercise, we're only confirming this script was run, so there's nothing to check.
	good_work
}

# If this script is switched back to being sourced, we'll need to change the "exit"s below to returns.

if [ ! -f ~/.learnUnix ]; then
	echo 'Please run the "learn" script first.'
	exit 1
fi

source ~/.learnUnix

if [ -z "${RANK:-}" ] || [ -z "${EXERCISE:-}" ]; then
	fmt -u --width=$luc_width <<EOL
echo 'Please run the "learn" script first.'
EOL
	exit 1
fi

if [[ ! "${RANK}" =~ ^(white|yellow|green|blue|red|black)_(stripe|belt)$ ]]; then
	fmt -u --width=$luc_width <<EOL
It looks like the ~/.learnUnix file has become corrupted.  If it can't be repaired, you may have no choice but to delete it
and start over.  Sorry about that.
EOL
	exit 2
fi

if [[ ! "${EXERCISE}" =~ ^[0-9]+$ ]]; then
	fmt -u --width=$luc_width <<EOL
It looks like the ~/.learnUnix file has become corrupted.  If it can't be repaired, you may have no choice but to delete it
and start over.  Sorry about that.
EOL
	exit 2
fi

luc_regex="'"
luc_regex+="${RANK}_exercise_.*\(\)"
luc_regex+="'"
luc_num_exercises=$(bash -c "grep -E ${luc_regex} ~/bin/learn | wc -l")

exercise_name=${exercises["${RANK}_${EXERCISE}"]}
function_name="${RANK}_exercise_${exercise_name}"
eval $function_name

if (($EXERCISE > $luc_num_exercises)); then
	echo ""

	# Use an extra ${luc_nc} to fix an issue with PuTTY.
	printf "Congratulations!  You have now attained your ${luc_yellow_on_black}yellow ${luc_nc}${luc_bright_white_on_black}stripe${luc_nc}.\n"
	printf "You are now working toward your ${luc_yellow_on_black}yellow belt${luc_nc}.\n\n"

	echo 'From here on out, there will be no reminder to execute "learn".'

	echo "RANK=yellow_stripe" > ~/.learnUnix
	echo "EXERCISE=1" >> ~/.learnUnix
else
	echo "RANK=$RANK" > ~/.learnUnix
	echo "EXERCISE=$EXERCISE" >> ~/.learnUnix
fi

