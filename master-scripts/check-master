#!/bin/bash -i

# This file is part of the "learn-unix-scripts" project.
#
# The "learn-unix-scripts" project is free software: you can redistribute it and/or modify it under the terms of the GNU
# General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# The "learn-unix-scripts" project is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along with this project; if not, write to the
# Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA, 02111-1307, USA.
#
# Copyright (C) 2021 Christopher Evans

# This script was developed in a 130x30 terminal.

# replace start c751ee38-33af-4a92-80cd-cfe18c29bf9b (see below for what this line does)

# This script is the master script for the learn script.  If you have site-specific changes that you don't want to share,
# you can add a GUID in this script and use the "replace" script to merge this script with your site-specific changes
# (in learn-replace) and create a site-specific learn script.  You can insert or replace portions of this code.

# If we didn't replace this text when we created the learn script, it would seem as though people should be making the changes
# to the learn script and not this one.  See the replacement for 1acc396a-02a2-40b8-a427-f4685c20320e in learn-replace for more.
#
# Insert exercises or elements that are specific to your site with "# insert <GUID>".  If you put a space after the GUID,
# you can add comments.  Replace parts with "# replace start <GUID>" and "# replace end <GUID>".  To remove sections,
# replace the content with nothing.  Put the replacements in the learn-replace file.
#
# replace end c751ee38-33af-4a92-80cd-cfe18c29bf9b

# insert 17fa07e6-24b8-4e35-bc1a-094427fd8699

if [ `whoami` == "root" ]; then
	echo "Run this script as yourself, not the root user."
	exit 1
fi

# Get around the unbound variable error with ${ZSH_EVAL_CONTEXT:-}.
if ([[ -n "${ZSH_EVAL_CONTEXT:-}" && "${ZSH_EVAL_CONTEXT:-}" == "toplevel" ]] ||
	[[ -n "${BASH_VERSION:-}" && "$0" == "${BASH_SOURCE:-}" ]]); then
	echo "Run this script as '. check' not 'check'."
	
	exit 0
fi

# insert 1a88ef09-bbc8-4f7e-ac03-a1849fd03166 stty options
# insert bef71a69-5f8d-43d4-af29-60608e9b56c7 file_clean_up_array and trap
# insert dbfb406a-b3c4-4c8d-84f3-4f54bef5d50e make_temp

# When we pipe in the history to the checkmain script through standard in, the TTY will be reset and it becomes harder to
# check the rows and columns.
LUS_STTY_ROWS=$(stty ${stty_options} | head -1 | sed 's/.*; \([0-9][0-9]*\) rows.*/\1/;s/.*; rows \([0-9][0-9]*\).*/\1/')
LUS_STTY_COLUMNS=$(stty ${stty_options} | head -1 | sed 's/.*; \([0-9][0-9]*\) columns.*/\1/;s/.*; columns \([0-9][0-9]*\).*/\1/')

# We could make the entire script (check and checkmain) so it can be sourced but that would mean all the subroutines would
# be added to the environment, and "set -e -o unset" would be problematic.

# After trying out named pipes and fds across multiple operating systems, and the issues involved with having stdin
# redirected, I finally gave up and just used temp files.
previous_umask=$(umask)
umask 077
make_temp
# make_temp removes e, and we don't want that in this sourced script.
set +e
file_clean_up_array+=($fmt_file)
umask ${previous_umask}

if [ "${HISTTIMEFORMAT:-}" == "%F %T " ]; then
	history 5 | tr -s ' ' | cut -d" " -f5- > $fmt_file
else
	history 5 | tr -s ' ' | cut -d" " -f3- > $fmt_file
fi

checkmain $fmt_file $LUS_STTY_ROWS $LUS_STTY_COLUMNS
