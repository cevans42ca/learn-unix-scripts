This project contains a suite of scripts to teach various aspects of
Unix with the bash shell.

This readme file is for system administrators who want to make the
learn Unix scripts available for users.

If you're not a system administrator, we recommend that you download
Docker Desktop on Windows or Mac and run the commands on the following page.

https://github.com/cevans42ca/learn-unix-scripts#try-them-out-in-docker

If you are a Unix sysadmin, run the ./configure script and follow the
prompts, but you may need some other things first (see below).

Although the scripts are written in bash, I intend the exercises
to be broad enough to work on FreeBSD, Macs, Linux, and any system that
has bash installed or could have bash installed.  However, not all these
systems are currently supported.  The "verify" script can check some
requirements, but it's still a prototype.

For Mac, you will need Homebrew with bash, ggrep, and shuf to run the
first set of exercises.  If encfs (which requires FUSE) is not
installed, a few exercises will not be interactive.  It's not easy to
install FUSE, so you can skip the interactive parts, use Docker as
described at the beginning of this readme, or run the ./configure script
and choose to use Docker when it asks you.

For FreeBSD, you will need:  bash version 4 or later, a version of grep
that supports -P, and shuf.  Having encfs is recommended.  Other BSDs
are likely to need the same things.

This project is in alpha status.  Please check back for updates.

https://github.com/cevans42ca/learn-unix-scripts

Although there's a roadmap for exercises from white belt to black belt,
only about half of the planned exercises are complete.

I will use the term "student" to refer to anyone who will be using the
scripts in this project to learn Unix.


Student POV
===========

The scripts that students will be using are "learn" and "check".
The "learn" script teaches some aspect of Unix and the "check" script
verifies that the lesson has been completed.  Upon successful completion,
the next invocation of the "learn" script will teach the next lesson.
These scripts don't require arguments.  Progress is kept in a dot file
in the user's home directory by default, or $LUS_PROGRESS.


Runtime Architecture
====================

The "check" script is a wrapper which provides the recent history to
the "checkmain" script.  In some cases, the checkmain script
looks at the command history to see if the lesson was completed correctly.
Accessing the recent history is only possible in a sourced script.


Preparing the Scripts Without Site-Specific Changes
===================================================

First, run the ./configure script, which will ask you if you intend to use
Docker.  It will then guide you on what to do next.


Site-Specific Changes
=====================

The "learn", "check", and "checkmain" script have master versions.
These scripts have been built in such a way that you can add your own
site-specific or proprietary lessons or text.

By adding a GUID in the master version of the file, you can insert or
replace your own site-specific lessons or text at that point.  Only the
GUID is public.  If you submit a pull request to add your GUID to the
master files, you can stay up to date with the latest public version
without having to constantly maintain your changes.  The "replace" script
accepts multiple replacement files between the first and last argument,
so you can split your replacements into multiple files.

To get started, copy the "site-install" directory to "site" and look
at the replace script and replacement file.  The "site" directory is
ignored in Git, so Git will not prompt you to push any changes you make
there.


List of Core Provided and Created Files
=======================================

dist/bin/check:
  A wrapper for the "checkmain" script.  Created by running the "replace"
  script.

dist/bin/checkmain:
  Verifies that lessons have been completed.  Created by running the
  "replace" script.

dist/bin/learn:
  Provides the next lesson.  Created by running the "replace" script.

replace:
  A script that makes replacements in the master learn and check files
  to produce the "learn" and "checkmain" scripts that will be run by users.

master-scripts/learn-master:
  The master version of the "learn" script, used by the "replace" script.

master-scripts/check-master:
  The master version of the "check" script, used by the "replace" script.

master-scripts/checkmain-master:
  The master version of the "checkmain" script, used by the "replace" script.

replacements/check-replace:
replacements/checkmain-replace:
replacements/learn-replace:
  Files containing an example replacement, used by the "replace" script.


