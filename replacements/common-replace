# This file contains a list of replacements for both the "check" script and the "learn" script.
# Create your own site-specific replacements and merge them with the "replace" script.  See site-install for examples.
# Generate GUIDs with uuidgen.

# start ffa9e74e-2b02-4d72-9c82-9f9db2915c62
LUS_PROGRESS=${LUS_PROGRESS:-"$HOME/.learnUnixScripts"}

black_on_white="\033[30;107m"
bright_white_on_black="$(tput setab 0)$(tput setaf 7)$(tput bold)"
yellow_on_black="\033[93;40m"
green_on_black="\033[92;40m"
blue_on_black="\033[94;40m"
red_on_black="\033[91;40m"

underline="\033[4m"
no_underline="\033[m"

nc='\033[0m' # No colour

# Use an associative array to make it easy to reorder the exercises and add more in the middle.
i=1
declare -A exercises
exercises["white_belt_$((i++))"]="what_execute_means"
exercises["white_belt_$((i++))"]="stuck"
exercises["white_belt_$((i++))"]="cd_root"
exercises["white_belt_$((i++))"]="ls_root"
exercises["white_belt_$((i++))"]="common_root_directories"
exercises["white_belt_$((i++))"]="frozen"
exercises["white_belt_$((i++))"]="set"
exercises["white_belt_$((i++))"]="set_more"
exercises["white_belt_$((i++))"]="set_less"
exercises["white_belt_$((i++))"]="path_and_sourcing"

i=1
exercises["yellow_stripe_$((i++))"]="pwd"
exercises["yellow_stripe_$((i++))"]="cd_dot_dot"
exercises["yellow_stripe_$((i++))"]="no_news_is_good_news"
exercises["yellow_stripe_$((i++))"]="mkdir_and_relative_paths"
exercises["yellow_stripe_$((i++))"]="rmdir"
exercises["yellow_stripe_$((i++))"]="special_characters"
exercises["yellow_stripe_$((i++))"]="file"
exercises["yellow_stripe_$((i++))"]="cat_less"
exercises["yellow_stripe_$((i++))"]="quotes"
exercises["yellow_stripe_$((i++))"]="escaping_quotes"
exercises["yellow_stripe_$((i++))"]="quote_finale"

i=1
exercises["yellow_belt_$((i++))"]="speed_and_lists"
exercises["yellow_belt_$((i++))"]="unquoted_tab_completion"
exercises["yellow_belt_$((i++))"]="unquoted_tab_completion_two_options"
exercises["yellow_belt_$((i++))"]="quoted_tab_completion"
exercises["yellow_belt_$((i++))"]="tab_is_context_sensitive"
exercises["yellow_belt_$((i++))"]="up"
exercises["yellow_belt_$((i++))"]="home_end_and_pound"
exercises["yellow_belt_$((i++))"]="ctrl_r"
exercises["yellow_belt_$((i++))"]="history_bang"
exercises["yellow_belt_$((i++))"]="command_line_options"
exercises["yellow_belt_$((i++))"]="ls"
exercises["yellow_belt_$((i++))"]="ls_dash_l"
exercises["yellow_belt_$((i++))"]="ls_explore"
exercises["yellow_belt_$((i++))"]="ls_dash_h"

declare -A belt_to_number
belt_to_number["white_belt"]=0
belt_to_number["yellow_stripe"]=1
belt_to_number["yellow_belt"]=2
belt_to_number["green_stripe"]=3
belt_to_number["green_belt"]=4
belt_to_number["blue_stripe"]=5
belt_to_number["blue_belt"]=6
belt_to_number["red_stripe"]=7
belt_to_number["red_belt"]=8
belt_to_number["black_stripe"]=9
belt_to_number["black_belt"]=10

declare -A number_to_belt
number_to_belt[0]="white_belt"
number_to_belt[1]="yellow_stripe"
number_to_belt[2]="yellow_belt"
number_to_belt[3]="green_stripe"
number_to_belt[4]="green_belt"
number_to_belt[5]="blue_stripe"
number_to_belt[6]="blue_belt"
number_to_belt[7]="red_stripe"
number_to_belt[8]="red_belt"
number_to_belt[9]="black_stripe"
number_to_belt[10]="black_belt"
# end ffa9e74e-2b02-4d72-9c82-9f9db2915c62

# start 37333148-8746-4468-826e-544e532f1ebc
getBeltWithColours() {
	if [[ "$1" == "white_belt" ]]; then
		echo "${bright_white_on_black}white belt${nc}"
	elif [[ "$1" == "yellow_stripe" ]]; then
		echo "${yellow_on_black}yellow ${nc}${bright_white_on_black}stripe${nc}"
	elif [[ "$1" == "yellow_belt" ]]; then
		echo "${yellow_on_black}yellow belt${nc}"
	elif [[ "$1" == "green_stripe" ]]; then
		echo "${green_on_black}green ${yellow_on_black}stripe${nc}"
	elif [[ "$1" == "green_belt" ]]; then
		echo "${green_on_black}green belt${nc}"
	elif [[ "$1" == "blue_stripe" ]]; then
		echo "${blue_on_black}blue ${green_on_black}stripe${nc}"
	elif [[ "$1" == "blue_belt" ]]; then
		echo "${blue_on_black}blue belt${nc}"
	elif [[ "$1" == "red_stripe" ]]; then
		echo "${red_on_black}red ${blue_on_black}stripe${nc}"
	elif [[ "$1" == "red_belt" ]]; then
		echo "${red_on_black}red belt${nc}"
	elif [[ "$1" == "black_stripe" ]]; then
		echo "${black_on_white}black ${red_on_black}stripe${nc}"
	elif [[ "$1" == "black_belt" ]]; then
		echo "${black_on_white}black belt${nc}"
	fi
}

updateDotFile() {
	if [ ! -f "${LUS_PROGRESS}" ]; then
		echo "RANK=$RANK" > "${LUS_PROGRESS}"
		echo "EXERCISE=$EXERCISE" >> "${LUS_PROGRESS}"
	else
		if grep -q "RANK=" "${LUS_PROGRESS}"; then
			sed -i "s/RANK=.*/RANK=${RANK}/" "${LUS_PROGRESS}"
		else
			echo "RANK=${RANK}" >> "${LUS_PROGRESS}"
		fi

		if grep -q "EXERCISE=" "${LUS_PROGRESS}"; then
			sed -i "s/EXERCISE=.*/EXERCISE=${EXERCISE}/" "${LUS_PROGRESS}"
		else
			echo "EXERCISE=${EXERCISE}" >> "${LUS_PROGRESS}"
		fi

		if grep -q "SAVED_RANK=" "${LUS_PROGRESS}"; then
			sed -i "s/SAVED_RANK=.*/SAVED_RANK=${SAVED_RANK:-}/" "${LUS_PROGRESS}"
		else
			echo "SAVED_RANK=${SAVED_RANK:-}" >> "${LUS_PROGRESS}"
		fi

		if grep -q "SAVED_EXERCISE=" "${LUS_PROGRESS}"; then
			sed -i "s/SAVED_EXERCISE=.*/SAVED_EXERCISE=${SAVED_EXERCISE:-}/" "${LUS_PROGRESS}"
		else
			echo "SAVED_EXERCISE=${SAVED_EXERCISE:-}" >> "${LUS_PROGRESS}"
		fi
	fi	
}

trim() {
	# remove leading whitespace characters
	temp="${1#"${1%%[![:space:]]*}"}"
	# remove trailing whitespace characters
	temp="${temp%"${temp##*[![:space:]]}"}"   
	echo "$temp"
}

# The shell does all the work of removing the extra spaces.  It only works with one argument.
simple_trim() {
	echo "$1"
}
# end 37333148-8746-4468-826e-544e532f1ebc

