#!/bin/sh

rm -f config.status
touch config.status

if [[ "${BASH_VERSINFO:-0}" < "4" ]]; then
	if [ -f /usr/local/bin/bash ]; then
		homebrew=$(/usr/local/bin/bash -c 'echo ${BASH_VERSINFO[0]}')
		echo "/bin/bash too old, checking Homebrew version:  $homebrew"
		if [[ "$homebrew" < "4" ]]; then
			echo "Associative array support, added in Bash 4.0, is required.  Homebrew bash not found either."
			echo "If you have a Mac, install Homebrew, then install bash."
			exit 2
		else
			sed 's/\/bin\/bash/\/usr\/local\/bin\/bash/' replace-master > replace
			chmod ug+x replace
			HOMEBREW_BASH=1
		fi
	else
		echo "Associative array support, added in Bash 4.0, is required."
		echo "If you have a Mac, install Homebrew, then install bash."
		exit 2
	fi 
else
	cp replace-master replace
fi 

# TODO:  Figure out how to do relative dates to ensure files created by touch are recent
#date --date="3 months ago" +"%Y%m%d"
#date -v-3m +"%Y%m%d"

echo "What would you like to do?"
echo "(1) Generate the scripts for audit or review (don't install)."
echo "(2) Create a docker container for a single user and run it."
echo "(3) Prepare the scripts to run directly (without docker) on this host."

read -p "Please answer (1-3)?  " luc_choice

if [[ "${luc_choice}" =~ ^[\ ]*1[\ ]*$ ]]; then
	sed 's/^run:.*/run: configure replace/' Makefile-master > Makefile
	echo "DOCKER=0" >> config.status
elif [[ "${luc_choice}" =~ ^[\ ]*2[\ ]*$ ]]; then
	sed 's/^run:.*/run: configure dockerrun/' Makefile-master > Makefile
	DOCKER=1
	echo "DOCKER=1" >> config.status
elif [[ "${luc_choice}" =~ ^[\ ]*3[\ ]*$ ]]; then
	sed 's/^run:.*/run: configure flags\/replacetarget/' Makefile-master > Makefile
	if [ -n "${HOMEBREW_BASH:-}" ]; then
		echo "HOMEBREW_BASH=1" >> config.status
	fi

	if echo "Test" | fmt -u 2>/dev/null; then
		echo "FMT_OPTIONS=-u --width=" >> config.status
	else
		echo "FMT_OPTIONS=-" >> config.status
	fi

	echo "DOCKER=0" >> config.status
else
	echo "Your answer should be a number between 1 and 3."
	exit 1
fi

# Query a property from the terminal, e.g. background color.
#
# XTerm Operating System Commands
#     "ESC ] Ps;Pt ST"
#
# Copied and adapted from blueyed's answer to:
# https://stackoverflow.com/questions/2507337/how-to-determine-a-terminals-background-color

oldstty=$(stty -g)

# What to query?
# 11: text background
Ps=${1:-11}

echo "During background colour detection, the terminal may flash or beep, and"
echo "you may see some strange characters."

sleep 2

stty raw -echo min 0 time 0
# stty raw -echo min 0 time 1
printf "\033]$Ps;?\033\\"
# xterm needs the sleep (or "time 1", but that is 1/10th second).
sleep 0.01
read -r answer
result=${answer#*;}
stty $oldstty

echo
echo "Detected RGB " $result
colours=$(echo ${result} | sed 's/rgb://' | sed 's/[^[:print:]]//g')

redhex=$(echo $colours | cut -f1 -d'/')
greenhex=$(echo $colours | cut -f2 -d'/')
bluehex=$(echo $colours | cut -f3 -d'/')

red=$(printf "%d" $((16#$redhex)))
green=$(printf "%d" $((16#$greenhex)))
blue=$(printf "%d" $((16#$bluehex)))

total=$(echo "$red + $green + $blue" | bc)

if [ ! -f docker/Makefile ]; then
	cp docker/Makefile-master docker/Makefile
fi

if [[ "$total" > 150000 ]]; then
	echo "Enabling light mode."
	echo "DARK_MODE=0" >> config.status
	echo "DARK_MODE=0" >> docker/config.status
else
	echo "Enabling dark mode (traditional white on black)."
	echo "DARK_MODE=1" >> config.status
	echo "DARK_MODE=1" >> docker/config.status
fi

if [ "${DOCKER:-0}" -eq "1" ]; then
	echo "SHUF_BIN=shuf" >> config.status
	echo "GREP_BIN=grep" >> config.status
	echo "SED_ARGS=-i" >> config.status
else
	if which gshuf > /dev/null; then
		echo "SHUF_BIN=gshuf" >> config.status
	elif which shuf; then
		echo "SHUF_BIN=shuf" >> config.status
	else
		echo "Neither shuf or gshuf were found.  On Mac with Homebrew, brew install coreutils."
		exit 1
	fi

	if which ggrep > /dev/null; then
		echo "GREP_BIN=ggrep" >> config.status
	else
		echo "GREP_BIN=grep" >> config.status
	fi

	if sed -i 's/there are no possible matches//' config.status 2>/dev/null; then
		echo "SED_ARGS=-i" >> config.status
	else
		echo "SED_ARGS=-i ''" >> config.status
	fi
fi

touch flags/configuretarget

echo
echo "Run make with no arguments."

