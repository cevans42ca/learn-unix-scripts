#!/bin/sh

# This file is part of the "learn-unix-scripts" project.
#
# The "learn-unix-scripts" project is free software: you can redistribute it and/or modify it under the terms of the GNU
# General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# The "learn-unix-scripts" project is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along with this project; if not, write to the
# Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA, 02111-1307, USA.
#
# Copyright (C) 2021 Christopher Evans

# This verify script's purpose is to help in confirming that all features and dependencies that the scripts use are
# available.  This script should be run the same way students are expected to run these scripts (for example, if students
# are expected to run these scripts by using PuTTY to SSH into an on-campus server, this script should be run the same
# way).

# This script was developed in a 130x30 terminal.

if [ `whoami` == "root" ]; then
	echo "Run this script as a normal user, not the root user.  (Don't use dzdo or sudo.)"
	exit 1
fi

parent_proc_name=`ps -p $PPID -o comm=`
echo "Checking that the parent process is bash."
case "$parent_proc_name" in
*bash*)
	echo "Bash required and detected."
;;
*)
	echo "The parent process is $parent_proc_name.  An interactive bash shell was expected."
	echo "The scripts in this project are written in bash and require the user to use the bash shell."
	echo "But they're open source, so feel free to use the lesson text and write your own."
	exit 1
esac

echo "Checking for bash version 4 or later."
if [ "${BASH_VERSINFO:-0}" -le "4" ]; then
	if [ -f /usr/local/bin/bash ]; then
		homebrew=$(/usr/local/bin/bash -c 'echo ${BASH_VERSINFO[0]}')
		#echo "/bin/bash too old, checking Homebrew version:  $homebrew"
		if [ "$homebrew" -le "4" ]; then
			echo "Associative array support, added in Bash 4.0, is required.  Homebrew bash not found either."
			echo "If you have a Mac, install Homebrew, then install bash."
			exit 2
		#else
			#echo "Homebrew bash installed."
		fi
	else
		echo "Associative array support, added in Bash 4.0, is required."
		echo "If you have a Mac, install Homebrew, then install bash."
		exit 2
	fi 
fi 

echo "Checking stty arguments."
stty -a 2>&1 | grep -q 'rows'
check_one=$?
stty -a 2>&1 | grep -q 'intr'
check_two=$?

if [ "${check_one}" -eq "0" ] && [ "${check_two}" -eq "0" ]; then
	stty_options='-a'
else
	stty_options='everything'
fi

echo "Checking interrupt character."
stty ${stty_options} | grep -qF "intr = ^C"
if [ $? -ne 0 ]; then
	echo "The interrupt character is not Ctrl+C or could not be parsed from the output of stty."
	echo "The exercises specifically say to use Ctrl+C, so if you can't change it, you"
	echo "will need to tell all students the correct interrupt character."
	exit 3
fi

if ! which tput > /dev/null; then
	echo "tput is not installed and is required.  It's part of ncurses."
	exit 4
fi

if ! which fmt > /dev/null; then
	echo "fmt is not installed and is required.  It's part of the coreutils package."
	exit 5
fi

if ! which man > /dev/null; then
	echo "man is not installed and is required."
	exit 6
fi

if ! which shuf > /dev/null; then
	if ! which gshuf > /dev/null; then
		echo "Neither shuf or gshuf were found.  On Mac with Homebrew, brew install coreutils."
		exit 7
	fi
fi

if ! which encfs > /dev/null; then
	echo
	echo "The encfs executable isn't present or is not in the path."
	echo "The exercise associated with encfs won't be interactive."
else
	script=$(readlink -f "$0")
	script_dir=$(dirname "$script")
	mkdir "${script_dir}"/lus-testenc
	mkdir "${script_dir}"/lus-testunenc
	echo "Checking encfs.  Mounting a test filesystem."
	if printf "Test Password\n" | encfs --stdinpass --standard "${script_dir}"/lus-testenc "${script_dir}"/lus-testunenc > "${script_dir}"/encfs.log; then
		if mount | grep -q "encfs.*lus-testunenc"; then
			if encfs -u "${script_dir}"/lus-testunenc; then
				rm -Rf "${script_dir}"/lus-testenc
				rm -Rf "${script_dir}"/lus-testunenc
			fi	
		else
			echo "Encfs is installed but isn't working."
			echo "Users who use these scripts on this host will not be able to proceed past"
			echo "green stripe."
		fi
	else
		echo "Encfs is installed but isn't working."
		echo "Users who use these scripts on this host will not be able to proceed past"
		echo "green stripe."
	fi
fi

GREP_BIN=grep
if [ -x /usr/local/bin/grep ]; then
	GREP_BIN=/usr/local/bin/grep
elif which ggrep > /dev/null; then
	GREP_BIN=ggrep
fi

echo 
echo 
echo "Verify that some of the words in this sentence are red.  (Checks grep --color.)" | ${GREP_BIN} --color=always "some of the words"
echo "Verify that some of the words in $(tput setaf 196)this sentence are also$(tput sgr0) red.  (Checks tput.)"
echo "Verify that some of the words in this final sentence are red.  (Checks grep -P.)" | ${GREP_BIN} -P --color=always "(?<=Verify )that some of(?= the words)"
echo
echo "All three sentences should have red words.  If they don't, you may want to"
echo "check your terminal settings, your TERM environment variable, and/or"
echo "your version of tput."

