#!/bin/sh

# This file is part of the "learn-unix-scripts" project.
#
# The "learn-unix-scripts" project is free software: you can redistribute it and/or modify it under the terms of the GNU
# General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# The "learn-unix-scripts" project is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along with this project; if not, write to the
# Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA, 02111-1307, USA.
#
# Copyright (C) 2021 Christopher Evans

# This verify script's purpose is to help in confirming that all features and dependencies that the scripts use are
# available.  This script should be run the same way students are expected to run these scripts (for example, if students
# are expected to run these scripts by using PuTTY to SSH into an on-campus server, this script should be run the same
# way).

# This script was developed in a 130x30 terminal.

if [ "$(whoami)" == "root" ]; then
	echo "Run this script as a normal user, not the root user.  (Don't use dzdo or sudo.)"
	exit 1
fi

clean_up() {
	if [ -n "${tmp_file:-}" ]; then
		rm -f "${tmp_file}"
	fi
}

# It's a trap!  Run the clean_up subroutine on normal or aborted exit.
trap clean_up EXIT

if which less > /dev/null 2>&1; then
	less_prompt_move_on="Press h for help;?e: Enter for more (line %lb of %L).?e q to move on."

	if ! less -E~ -R -P "${less_prompt_move_on}" main/less-test; then
		echo "Please upgrade less."
		exit 2
	fi
else
	echo "Please install less."
	exit 2
fi

parent_proc_name=$(ps -p "$PPID")
echo "Checking that the parent process is bash."
case "$parent_proc_name" in
*bash*)
	echo "Bash required and detected."
;;
*)
	echo "The parent process is $parent_proc_name.  An interactive bash shell was expected."
	echo "The scripts in this project are written in bash and require the user to use the bash shell."
	echo "But they're open source, so feel free to use the lesson text and write your own."
	exit 3
esac

echo "Checking for bash version 4 or later."
if [ "${BASH_VERSINFO:-0}" -lt "4" ]; then
	if [ -f /usr/local/bin/bash ]; then
		homebrew=$(/usr/local/bin/bash -c 'echo ${BASH_VERSINFO[0]}')
		#echo "/bin/bash too old, checking Homebrew version:  $homebrew"
		if [ "$homebrew" -le "4" ]; then
			echo "Associative array support, added in Bash 4.0, is required.  Homebrew bash not found either."
			echo "If you have a Mac, install Homebrew, then install bash."
			exit 4
		#else
			#echo "Homebrew bash installed."
		fi
	else
		echo "Associative array support, added in Bash 4.0, is required."
		echo "If you have a Mac, install Homebrew, then install bash."
		exit 5
	fi 
fi 

umask 077
tmp_file=$(mktemp "--suffix_$(whoami)" 2>/dev/null)
RESULT=$?
if [ $RESULT -ne 0 ]; then
	tmp_file=$(mktemp -t "$(whoami)-XXXXXX")
fi

perms=$(ls -l -- "${tmp_file}")
perms=${perms%% *}
case $perms in
????------)
	echo "Umask successful."
	;;
*)
	echo "Umask failed.  These scripts create a temp file with group and other permission"
	echo "bits stripped that contains the last few commands from the history.  It's"
	echo "necessary to check the history to ensure some of the tasks are completed"
	echo "correctly.  Using a file (rather than a named pipe or fd) is necessary for"
	echo "portability across systems."
	echo
	echo "Either the temp file couldn't be created, it had the wrong"
	echo "permissions, or ls -l doesn't print permissions first on this system.  If the"
	echo "issue is not resolved, these scripts might not work, or there might be a"
	echo "security risk introduced."
	exit 11
esac

echo "Checking stty arguments."
stty -a 2>&1 | grep -q 'rows'
check_one=$?
stty -a 2>&1 | grep -q 'intr'
check_two=$?

if [ "${check_one}" -eq "0" ] && [ "${check_two}" -eq "0" ]; then
	stty_options='-a'
else
	stty_options='everything'
fi

echo "Checking interrupt character."
stty ${stty_options} | grep -qF "intr = ^C"
if [ $? -ne 0 ]; then
	echo "The interrupt character is not Ctrl+C or could not be parsed from the output of stty."
	echo "The exercises specifically say to use Ctrl+C, so if you can't change it, you"
	echo "will need to tell all students the correct interrupt character."
	exit 6
fi

if ! which tput > /dev/null; then
	echo "tput is not installed and is required.  It's part of ncurses."
	exit 7
fi

if ! which fmt > /dev/null; then
	echo "fmt is not installed and is required.  It's part of the coreutils package."
	exit 8
fi

if ! which man > /dev/null; then
	echo "man is not installed and is required."
	exit 9
fi

if ! which shuf > /dev/null; then
	if ! which gshuf > /dev/null; then
		echo "Neither shuf or gshuf were found.  On Mac with Homebrew, brew install coreutils."
		exit 10
	fi
fi

GREP_BIN=grep
if [ -x /usr/local/bin/grep ]; then
	GREP_BIN=/usr/local/bin/grep
elif which ggrep > /dev/null 2>&1; then
	GREP_BIN=ggrep
fi

if [ ! -r / ]; then
	echo
	echo "WARNING:  One of the exercises asks the student to list the files in the root"
	echo "directory.  It's not readable.  Students may try and fail, and may not"
	echo "realize that they can move on after failing."
fi

echo 
echo 
echo "Verify that some of the words in this sentence are red.  (Checks grep --color.)" | ${GREP_BIN} --color=always "some of the words"
echo "Verify that some of the words in this sentence are also red.  (Checks grep -P.)" | ${GREP_BIN} -P --color=always "(?<=Verify )that some of(?= the words)"
echo "Verify that some of the words in $(tput setaf 1)$(tput bold)this final sentence are$(tput sgr0) red.  (Checks tput.)"
echo
echo "All three sentences should have red words.  If they don't, you may want to"
echo "check your terminal settings, your TERM environment variable, and/or"
echo "your version of tput.  The first two sentences must have red words for the"
echo "exercises to make sense.  On FreeBSD the last one is not likely to work,"
echo "but it won't compromise the exercises."

